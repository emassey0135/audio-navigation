plugins {
  id 'dev.architectury.loom'
  id 'architectury-plugin'
  id 'com.gradleup.shadow'
}
repositories {
  maven {
    name = 'NeoForged'
    url = 'https://maven.neoforged.net/releases'
  }
  maven {
    name = 'Kotlin for Forge'
    url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
  maven {
    name = "FzzyMaven"
    url = "https://maven.fzzyhmstrs.me/"
  }
}
loom {
  silentMojangMappingsLicense()
}
architectury {
  platformSetupLoomIde()
  neoForge()
}
configurations {
  common {
    canBeResolved = true
    canBeConsumed = false
  }
  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentNeoForge.extendsFrom common
  shadowBundle {
    canBeResolved = true
    canBeConsumed = false
  }
}
dependencies {
  minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
  mappings loom.officialMojangMappings()
  neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"
  modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"
  implementation "thedarkcolour:kotlinforforge-neoforge:$rootProject.kotlin_for_forge_version"
  modImplementation "me.fzzyhmstrs:fzzy_config:${project.fzzy_config_neoforge_version}"
  implementation "org.xerial:sqlite-jdbc:${project.sqlite_jdbc_version}"
  shadow "org.xerial:sqlite-jdbc:${project.sqlite_jdbc_version}"
  implementation "org.lwjgl:lwjgl-opus:${project.lwjgl_version}"
  shadow "org.lwjgl:lwjgl-opus:${project.lwjgl_version}"
  shadow "org.lwjgl:lwjgl-opus:${project.lwjgl_version}:natives-linux"
  shadow "org.lwjgl:lwjgl-opus:${project.lwjgl_version}:natives-linux-arm64"
  shadow "org.lwjgl:lwjgl-opus:${project.lwjgl_version}:natives-macos"
  shadow "org.lwjgl:lwjgl-opus:${project.lwjgl_version}:natives-macos-arm64"
  shadow "org.lwjgl:lwjgl-opus:${project.lwjgl_version}:natives-windows"
  shadow "org.lwjgl:lwjgl-opus:${project.lwjgl_version}:natives-windows-arm64"
  common(project(path: ':common', configuration: 'namedElements')) { transitive false }
  shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
  common(project(path: ':common-client', configuration: 'namedElements')) { transitive false }
  shadowBundle project(path: ':common-client', configuration: 'transformProductionNeoForge')
}
processResources {
  inputs.property 'version', project.version
  filesMatching('META-INF/neoforge.mods.toml') {
    expand version: project.version
  }
}
shadowJar {
  configurations = [project.configurations.shadowBundle, project.configurations.shadow]
  archiveClassifier = 'dev-shadow'
  exclude 'org/lwjgl/*.class'
  exclude 'org/lwjgl/system/'
exclude 'org/sqlite/native/*/arm/'
exclude 'org/sqlite/native/*/armv6/'
exclude 'org/sqlite/native/*/armv7/'
exclude 'org/sqlite/native/*/ppc64/'
exclude 'org/sqlite/native/*/riscv64/'
exclude 'org/sqlite/native/*/x86/'
exclude 'org/sqlite/native/FreeBSD/'
exclude 'org/sqlite/native/Linux-Android/'
exclude 'org/sqlite/native/Linux-Musl/'
}
remapJar {
  inputFile.set shadowJar.archiveFile
}
